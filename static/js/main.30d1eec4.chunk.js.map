{"version":3,"sources":["LogsContainer.js","App.js","serviceWorker.js","index.js"],"names":["LogsContainer","useState","show","setShow","logs","setLogs","useEffect","Hook","window","console","log","currLogs","Unhook","onClick","style","backgroundColor","maxHeight","minHeight","maxWidth","margin","overflowY","textAlign","variant","App","videoSrc","setVideoSrc","inputv","setInputv","message","setMessage","prog","setProg","ffmpeg","createFFmpeg","progress","p","ratio","inputEl","useRef","loadVideo","file","Promise","resolve","reject","video","document","createElement","preload","onloadedmetadata","this","onerror","src","URL","createObjectURL","e","doTranscode","a","files","current","name","dvideo","duration","TOTAL_TARGET","Math","floor","BR_AUDIO","min","BR_VIDEO","audio","scale","videoWidth","videoHeight","load","fetchFile","FS","run","data","Blob","buffer","type","className","id","ref","onChange","target","length","disabled","controls","display","toFixed","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.30d1eec4.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Console, Hook, Unhook } from \"console-feed\";\r\n\r\nconst LogsContainer = () => {\r\n  const [show, setShow] = useState(false);\r\n  const [logs, setLogs] = useState([]);\r\n\r\n  // run once!\r\n  useEffect(() => {\r\n    Hook(\r\n      window.console,\r\n      (log) => setLogs((currLogs) => [...currLogs, log]),\r\n      false\r\n    );\r\n    return () => Unhook(window.console);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <button onClick={() => setShow(!show)}>Console</button>\r\n      {show ? (\r\n        <div\r\n          style={{\r\n            backgroundColor: \"#242424\",\r\n            maxHeight: \"50vh\",\r\n            minHeight: \"50vh\",\r\n            maxWidth: \"800px\",\r\n            margin: \"auto\",\r\n            overflowY: \"scroll\",\r\n            textAlign: \"start\",\r\n          }}\r\n        >\r\n          <Console logs={logs} variant=\"dark\" />\r\n        </div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LogsContainer;\r\n","import React, { useState, useRef } from \"react\";\r\nimport LogsContainer from \"./LogsContainer\"\r\nimport { createFFmpeg, fetchFile } from \"@ffmpeg/ffmpeg\";\r\nimport \"./App.css\";\r\n\r\nconst Kb_TARGET = 131072;\r\n\r\nfunction App() {\r\n  const [videoSrc, setVideoSrc] = useState(null);\r\n  const [inputv, setInputv] = useState(null);\r\n  const [message, setMessage] = useState(\"Select a file and click Convert to start\");\r\n  const [prog, setProg] = useState(null);\r\n  const ffmpeg = createFFmpeg({\r\n    log: true,\r\n    progress: p => setProg(p.ratio*100)\r\n  });\r\n  const inputEl = useRef(null);\r\n  const loadVideo = (file) =>\r\n    new Promise((resolve, reject) => {\r\n      try {\r\n        let video = document.createElement(\"video\");\r\n        video.preload = \"metadata\";\r\n\r\n        video.onloadedmetadata = function () {\r\n          resolve(this);\r\n        };\r\n\r\n        video.onerror = function () {\r\n          reject(\"Invalid video. Please select a video file.\");\r\n        };\r\n\r\n        video.src = window.URL.createObjectURL(file);\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  const doTranscode = async () => {\r\n    let {\r\n      current: { files },\r\n    } = inputEl;\r\n    const { name } = files[0];\r\n    const dvideo = await loadVideo(files[0]);\r\n    const duration = dvideo.duration;\r\n    let TOTAL_TARGET = Math.floor((Kb_TARGET / duration) * 0.97);\r\n    let BR_AUDIO = Math.min(Math.floor(TOTAL_TARGET * (1 / 3)), 128);\r\n    let BR_VIDEO = Math.floor(TOTAL_TARGET - BR_AUDIO);\r\n    let audio = BR_AUDIO + \"k\";\r\n    let video = BR_VIDEO + \"k\";\r\n    let scale = \"\";\r\n\r\n    if (dvideo.videoWidth >= dvideo.videoHeight) {\r\n      scale = \"640:-1\";\r\n    }\r\n    else {\r\n      scale = \"-1:640\";\r\n    }\r\n\r\n    setMessage(\"Loading ffmpeg-core.js\");\r\n    await ffmpeg.load();\r\n    setVideoSrc(null);\r\n    setMessage(\"Converting...\");\r\n    ffmpeg.FS(\"writeFile\", name, await fetchFile(files[0]));\r\n    await ffmpeg.run(\r\n      \"-y\",\r\n      \"-i\",\r\n      name,\r\n      \"-c:v\",\r\n      \"libx264\",\r\n      \"-b:v\",\r\n      video,\r\n      \"-b:a\",\r\n      audio,\r\n      \"-maxrate\",\r\n      video,\r\n      \"-vf\",\r\n      \"scale=\"+scale,\r\n      \"convert.mp4\"\r\n    );\r\n    setMessage(\"Conversion completed. Right-click the video and choose 'Save video as...'.\");\r\n    const data = ffmpeg.FS(\"readFile\", \"convert.mp4\");\r\n    setVideoSrc(\r\n      URL.createObjectURL(new Blob([data.buffer], { type: \"video/mp4\" }))\r\n    );\r\n  };\r\n  function isThereFile({ target: { files } }) {\r\n    if (files.length > 0) {\r\n      setInputv(true);\r\n      setVideoSrc(null);\r\n    }\r\n    else {\r\n      setInputv(null);\r\n    }\r\n    //console.log(files);\r\n  }\r\n  return (\r\n    <div className=\"App\">\r\n      <p />\r\n      <input type=\"file\" id=\"uploader\" ref={inputEl} onChange={isThereFile} disabled={prog > 0 && prog < 100}></input>\r\n      <button onClick={doTranscode} disabled={inputv==null || (prog > 0 && prog < 100)}>Convert</button>\r\n      <br />\r\n      <video src={videoSrc} controls style={{display: videoSrc != null? \"initial\": \"none\"}}></video>\r\n      <br />\r\n      <p>{message}</p>\r\n      <br />\r\n      {prog && <p>{prog.toFixed(0)}%</p>}\r\n      <LogsContainer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}